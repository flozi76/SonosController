@page "/"
@using Icarosdev.Sonos.Api.Model
@using Icarosdev.Sonos.Api


<PageTitle>Sonos</PageTitle>

<h1>Sonos</h1>
@*
<button class="btn btn-primary" @onclick="SonosOff">Sonos Off</button>
<button class="btn btn-primary" @onclick="SonosOn">Sonos On</button>

<p role="status">Answer: @(_status?.Status ?? "")</p>
*@
@if (_zones != null)
{
    foreach (var zone in _zones)
    {
        <div class="container">
            <div class="row">
                <div class="w-25">
                    <h3>Group: @zone.Room.RoomName</h3>
                </div>
                <div class="col-sm">
                    <button class="btn btn-primary" @onclick="() => PlayPause(zone.Room.RoomName)">Sonos On-Off</button>
@*                    <button class="btn btn-primary" @onclick="() => Play(zone.Room.RoomName)">Sonos On</button>
                    <button class="btn btn-primary" @onclick="() => Pause(zone.Room.RoomName)">Sonos Off</button>*@
                </div>
            </div>
        </div>
        <div class="container">

            @foreach (var room in zone.Members)
            {
                var roomClass = room.State.Mute ? "room-off" : "room-on";
                if (!string.IsNullOrWhiteSpace(_updatingRoom) && _updatingRoom == room.RoomName)
                {
                    roomClass = "progress";
                }
                <div class="row row-margin @roomClass">
                    <div class="col-2">
                        <img class="album-image" @onclick="() => ToggleMuteUnmute(room)" src="@room.State.CurrentTrack.AbsoluteAlbumArtUri"/>
                    </div>
                    <div class="col-2">

                        <h4>@room.RoomName</h4>
                        <span>@ResolveMainTrackInformation(room)</span>
                        <span>@ResolveDetailTrackInformation(room)</span>
                    </div>
                </div>
            }

        </div>
    }
}


@code {
        
    const string SonosServer = "raspberrypi";
    private Zone[]? _zones;
    private OperationStatus? _status;
    private SonosControl? _sonosControl;
    private string? _updatingRoom;

    protected override async Task<Task> OnInitializedAsync()
    {
        _sonosControl = new SonosControl(SonosServer);
        StartAutoRefresh();
        return base.OnInitializedAsync();
    }

    void StartAutoRefresh()
    {
        var timer = new Timer(new TimerCallback(async _ =>
        {
            await LoadZones();

            this.StateHasChanged();
        }), null, 3000, 3000);
    }

    private async Task LoadZones()
    {
        await Task.Delay(2000);
        _zones = await _sonosControl?.GetAllZones();
        _updatingRoom = null;
    }

    private async Task SonosOff()
    {
        PerformOperation();
        _status = await _sonosControl?.PauseAll();
    }

    private async Task SonosOn()
    {
        PerformOperation();
        _status = await _sonosControl?.ResumeAll();
        await LoadZones();
    }

    private async Task PlayPause(string zoneName)
    {
        PerformOperation();
        _status = await _sonosControl?.PlayPause(zoneName);
        await LoadZones();
    }

    private async Task Play(string zoneName)
    {
        PerformOperation();
        _status = await _sonosControl?.Play(zoneName);
        await LoadZones();
    }

    private async Task Pause(string zoneName)
    {
        PerformOperation();
        _status = await _sonosControl?.Pause(zoneName);
        await LoadZones();
    }

    private async Task Mute(string roomName)
    {
        PerformOperation(roomName);
        _status = await _sonosControl?.Mute(roomName);
        await LoadZones();
    }

    private async Task Unmute(string roomName)
    {
        PerformOperation(roomName);
        _status = await _sonosControl?.Unmute(roomName);
        await LoadZones();
    }

    private void PerformOperation(string? roomName = null)
    {
        _updatingRoom = roomName;
        _status = new OperationStatus { Status = "sending ..." };
    }

    public async Task ToggleMuteUnmute(Room room)
    {
        if (room.State.Mute)
        {
            await Unmute(room.RoomName);
        }
        else
        {
            await Mute(room.RoomName);
        }
    }

    public string ResolveMainTrackInformation(Room room)
    {
        return room.State.CurrentTrack.Artist;
    }

    public string ResolveDetailTrackInformation(Room room)
    {
        return string.Empty;
    }

}